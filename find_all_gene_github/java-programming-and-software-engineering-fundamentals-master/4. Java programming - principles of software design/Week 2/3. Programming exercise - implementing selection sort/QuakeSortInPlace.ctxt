#BlueJ class context
comment0.params=
comment0.target=QuakeSortInPlace()
comment1.params=quakes\ from
comment1.target=int\ getSmallestMagnitude(java.util.ArrayList,\ int)
comment10.params=quakes
comment10.target=boolean\ checkInSortedOrder(java.util.ArrayList)
comment10.text=\n\ Returns\ true\ if\ ArrayList\ is\ sorted\ in\ order\ by\ magnitude\ \n\ from\ smallest\ to\ largest.\ Otherwise\ returns\ false.\n
comment11.params=in
comment11.target=void\ sortByMagnitudeWithBubbleSortWithCheck(java.util.ArrayList)
comment11.text=\n\ Similar\ to\ sortByMagnitudeWithBubbleSort,\ but\ stops\ early\ \n\ if\ the\ ArrayList\ is\ already\ sorted.\n
comment12.params=in
comment12.target=void\ sortByMagnitudeWithCheck(java.util.ArrayList)
comment12.text=\n\ Similar\ to\ sortByMagnitude,\ but\ stops\ early\ \n\ if\ the\ ArrayList\ is\ already\ sorted.\n
comment2.params=in
comment2.target=void\ sortByMagnitude(java.util.ArrayList)
comment3.params=
comment3.target=void\ testSort()
comment4.params=
comment4.target=void\ createCSV()
comment5.params=list
comment5.target=void\ dumpCSV(java.util.ArrayList)
comment6.params=quakeData\ from
comment6.target=int\ getLargestDepth(java.util.ArrayList,\ int)
comment6.text=\n\ Returns\ the\ index\ position\ of\ the\ QuakeEntry\ with\ the\ largest\ depth\ considering\ \n\ only\ those\ QuakeEntrys\ from\ position\ from\ to\ the\ end\ of\ the\ ArrayList.\n
comment7.params=in
comment7.target=void\ sortByLargestDepth(java.util.ArrayList)
comment7.text=\n\ Sorts\ the\ QuakeEntrys\ in\ the\ ArrayList\ by\ depth\ using\ the\ selection\ sort\ \n\ algorithm,\ from\ largest\ depth\ to\ smallest\ depth.\n
comment8.params=quakeData\ numSorted
comment8.target=void\ onePassBubbleSort(java.util.ArrayList,\ int)
comment8.text=\n\ Makes\ one\ pass\ of\ bubble\ sort\ on\ the\ ArrayList,\ sorting\ by\ smallest\ to\ \n\ largest\ magnitude.\ One\ pass\ over\ the\ ArrayList\ compares\ adjacent\ elements\ \n\ and\ swaps\ them\ if\ they\ are\ out\ of\ order.\n\ @param\ quakeData\ is\ the\ ArrayList\ to\ sort\n\ @param\ numSorted\ is\ the\ number\ of\ times\ this\ method\ has\ already\ been\ called\n\ on\ the\ ArrayList\ and\ thus\ also\ represents\ the\ number\ of\ elements\ that\ are\ \n\ guaranteed\ to\ already\ be\ where\ they\ belong\ when\ the\ sorting\ is\ complete\n
comment9.params=in
comment9.target=void\ sortByMagnitudeWithBubbleSort(java.util.ArrayList)
comment9.text=\n\ Calls\ onePassBubbleSort\ N\ \u2013\ 1\ times\ to\ sort\ the\ elements\ in\ an\ ArrayList\ \n\ of\ N\ length.\n
numComments=13
